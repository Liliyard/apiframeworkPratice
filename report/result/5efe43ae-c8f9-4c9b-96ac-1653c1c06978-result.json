{"name": "test_login_book[datas5]", "status": "broken", "statusDetails": {"message": "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)", "trace": "self = <tests.test_book2.TestBook2 object at 0x00000223A2A6F940>\ndatas = {'前置条件': 'login', '描述': '删除书籍信息', '是否运行': 'y', '期望结果': '\"status\": 1009', ...}\n\n    @pytest.mark.parametrize('datas', excel.runs())\n    def test_login_book(self, datas):\n    \t'''\n    \t思路：\n    \t1、先获取到所有前置测试点的测试用例\n    \t2、执行前置测试点\n    \t3、获取它的结果信息\n    \t4、拿它的结果信息替换对应测试点的变量\n    \t'''\n    \t# 执行前置条件关联的测试点\n    \tr = obj.post(\n    \t\turl=excel.case_prev(datas[ExcelVarles.casePre])[ExcelVarles.caseUrl],\n    \t\tjson=excel.case_prev(datas[ExcelVarles.casePre])[ExcelVarles.params]\n    \t)\n    \tself.case_assert_result(req=r, data=excel.case_prev(datas[ExcelVarles.casePre]))\n    \tprevResult=r.json()['access_token']\n    \t#print(prevResult)\n    \theader=excel.prevHeaders('{token}', prevResult)\n    \t#status_code = int(datas[ExcelVarles.status_code])\n    \n    \t# 执行剩余用例\n    \tr = obj.request(\n    \t\turl=datas[ExcelVarles.caseUrl],\n    \t\tmethod=datas[ExcelVarles.method],\n    \t\t#headers=datas[ExcelVarles.headers],\n    \t\theaders=header,\n    \t\tjson=datas[ExcelVarles.params]\n    \t)\n>   \tprint(r.json())\n\ntest_book2.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\Liliyard\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\requests\\models.py:900: in json\n    return complexjson.loads(self.text, **kwargs)\nC:\\Users\\Liliyard\\AppData\\Local\\Programs\\Python\\Python37\\lib\\json\\__init__.py:348: in loads\n    return _default_decoder.decode(s)\nC:\\Users\\Liliyard\\AppData\\Local\\Programs\\Python\\Python37\\lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x00000223A21D4A58>\ns = '<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\\n<title>404 Not Found</title>\\n<h1>Not Found</h1>\\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nC:\\Users\\Liliyard\\AppData\\Local\\Programs\\Python\\Python37\\lib\\json\\decoder.py:355: JSONDecodeError"}, "description": "\n\t\t思路：\n\t\t1、先获取到所有前置测试点的测试用例\n\t\t2、执行前置测试点\n\t\t3、获取它的结果信息\n\t\t4、拿它的结果信息替换对应测试点的变量\n\t\t", "parameters": [{"name": "datas", "value": "{'测试用例ID': 'book_005', '模块': '书籍管理系统', '描述': '删除书籍信息', '请求地址': 'http://localhost:5000/v1/api/book/{bookID}', '前置条件': 'login', '请求方法': 'delete', '请求参数类型': '', '请求参数': '', '期望结果': '\"status\": 1009', '是否运行': 'y', '请求头': {'Authorization': 'JWT {token}'}, '状态码': 200.0}"}], "start": 1631598906691, "stop": 1631598910772, "uuid": "aa280a29-70d8-4616-b48f-105457f7e88a", "historyId": "8375487d45339ccb4d48563d9d9a3165", "testCaseId": "8423dcd8fad3624e03eeeb218702dc2f", "fullName": "test_book2.TestBook2#test_login_book", "labels": [{"name": "suite", "value": "test_book2"}, {"name": "subSuite", "value": "TestBook2"}, {"name": "host", "value": "Liliyard"}, {"name": "thread", "value": "25108-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_book2"}]}